generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusAppointment {
  pending
  confirmed
  completed
  canceled
}

enum RoleNames {
  ADMIN
  CLIENT
  EMPLOYEE
}

enum WeekDays {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  name        String?
  password    String?
  UserRole    UserRole[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Barbershops Barbershops[]

  @@map("users")
}

model Role {
  id        String     @id @default(uuid())
  name      RoleNames  @unique @default(CLIENT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserRole  UserRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])

  @@map("user_roles")
}

model Barbershops {
  id                    String                  @id @default(uuid())
  name                  String
  address               String
  phone                 String
  profilePicture        String
  banner                String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ownerId               String
  user                  User                    @relation(fields: [ownerId], references: [id])
  Clients               Clients[]
  Employees             Employees[]
  Services              Services[]
  BarbershopPreferences BarbershopPreferences[]

  @@map("barbershops")
}

model BarbershopPreferences {
  id                String      @id @default(uuid())
  barbershopId      String      @unique
  openTime          String?
  closeTime         String?
  weekDaysOperation WeekDays[]  @default([])
  intervalOperation Int?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  barbershop        Barbershops @relation(fields: [barbershopId], references: [id])

  @@map("barbershop_preferences")
}

model Clients {
  id             String         @id @default(uuid())
  name           String
  email          String
  phone          String
  address        String
  profilePicture String
  barbershopId   String
  barershop      Barbershops    @relation(fields: [barbershopId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Appointments   Appointments[]

  @@map("clients")
}

model Employees {
  id             String         @id @default(uuid())
  name           String
  email          String
  phone          String
  address        String
  profilePicture String
  barbershopId   String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  barbershop     Barbershops    @relation(fields: [barbershopId], references: [id])
  Appointments   Appointments[]

  @@map("employees")
}

model Services {
  id           String         @id @default(uuid())
  name         String
  description  String
  price        Float
  duration     Int
  image        String
  barbershopId String
  barbershop   Barbershops    @relation(fields: [barbershopId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Appointments Appointments[]

  @@map("services")
}

model Appointments {
  id         String            @id @default(uuid())
  clientId   String
  employeeId String
  serviceId  String
  date       DateTime
  status     StatusAppointment @default(pending)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  client     Clients           @relation(fields: [clientId], references: [id])
  employee   Employees         @relation(fields: [employeeId], references: [id])
  service    Services          @relation(fields: [serviceId], references: [id])

  @@map("appointments")
}
